{"version":3,"sources":["await.ts","await.js"],"names":["sleep","puts","sleepOneSecond","printSleepAndError"],"mappings":"QAAO,6BAA6B;;ACApC,IAAI,SAAS,GAAG,AAAC,IAAI,IAAI,IAAI,CAAC,SAAS,IAAK,UAAU,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE,SAAS,EAAE;AAC3F,WAAO,IAAI,OAAO,CAAC,UAAU,OAAO,EAAE,MAAM,EAAE;AAC1C,iBAAS,GAAG,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;AAChD,iBAAS,IAAI,CAAC,KAAK,EAAE;AAAE,mBAAO,KAAK,YAAY,OAAO,IAAI,KAAK,CAAC,WAAW,KAAK,OAAO,GAAG,KAAK,GAAG,IAAI,OAAO,CAAC,UAAU,OAAO,EAAE;AAAE,uBAAO,CAAC,KAAK,CAAC,CAAC;aAAE,CAAC,CAAC;SAAE;AACxJ,iBAAS,SAAS,CAAC,KAAK,EAAE;AAAE,gBAAI;AAAE,oBAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;aAAE,CAAC,OAAO,CAAC,EAAE;AAAE,sBAAM,CAAC,CAAC,CAAC,CAAC;aAAE;SAAE;AACnF,iBAAS,QAAQ,CAAC,KAAK,EAAE;AAAE,gBAAI;AAAE,oBAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;aAAE,CAAC,OAAO,CAAC,EAAE;AAAE,sBAAM,CAAC,CAAC,CAAC,CAAC;aAAE;SAAE;AACnF,iBAAS,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE;AACvB,gBAAI,MAAM,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC;AACpC,kBAAM,CAAC,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;SACtF;AACD,YAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;KACxB,CAAC,CAAC;CACN,CAAC;;ADVF,SAAA,KAAA,CAAe,YAAoB,EAAA;AACjCA,WAAOA,IAAIA,OAAOA,CAAOA,AAACA,OAAOA,IAAKA,UAAUA,CAACA,OAAOA,EAAEA,YAAYA,CAACA,CAACA,CAACA;CAC1EA;AAED,SAAA,IAAA,GAAsC;sCAArB,cAAqB;AAArB,sBAAqB;;;AACpCC,WAAOA,CAACA,GAAGA,CAACA,KAAKA,CAACA,IAAIA,EAAEA,SAASA,CAACA,CAACA;CACpCA;AAED,SAAA,cAAA,GAAA;ACWI,WAAO,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,OAAO,EAAE,aAAa;ADVvDC,cAAMA,KAAKA,CAACA,IAAIA,CAACA,CAACA;KACnBA,CAAAA,CAAAA;CAAA;AAED,SAAA,kBAAA,GAAA;ACYI,WAAO,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,OAAO,EAAE,aAAa;ADXvDC,YAAIA,CAACA,GAAGA,CAACA,CAACA;AACVA,cAAMA,cAAcA,EAAEA,CAACA;AACvBA,YAAIA,CAACA,GAAGA,CAACA,CAACA;AACVA,cAAMA,cAAcA,EAAEA,CAACA;AACvBA,YAAIA,CAACA,GAAGA,CAACA,CAACA;AACVA,cAAMA,IAAIA,KAAKA,CAACA,6CAA6CA,CAACA,CAACA;KAChEA,CAAAA,CAAAA;CAAA;AAED,kBAAkB,EAAE,CAAC,KAAK,CAAC,GAAG,IAAI,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,CAAC,CAAC","file":"await.js","sourcesContent":["import 'source-map-support/register'\n\nfunction sleep(milliseconds: number): Promise<void> {\n  return new Promise<void>((resolve) => setTimeout(resolve, milliseconds));\n}\n\nfunction puts(...optionalParams: any[]): void {\n  console.log.apply(this, arguments);\n}\n\nasync function sleepOneSecond(): Promise<void> {\n  await sleep(1000);\n}\n\nasync function printSleepAndError(): Promise<void> {\n  puts('1');\n  await sleepOneSecond();\n  puts('2');\n  await sleepOneSecond();\n  puts('3');\n  throw new Error('throw error to showcase source map support.');\n}\n\nprintSleepAndError().catch(err => console.log(err.stack || err));\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, Promise, generator) {\n    return new Promise(function (resolve, reject) {\n        generator = generator.call(thisArg, _arguments);\n        function cast(value) { return value instanceof Promise && value.constructor === Promise ? value : new Promise(function (resolve) { resolve(value); }); }\n        function onfulfill(value) { try { step(\"next\", value); } catch (e) { reject(e); } }\n        function onreject(value) { try { step(\"throw\", value); } catch (e) { reject(e); } }\n        function step(verb, value) {\n            var result = generator[verb](value);\n            result.done ? resolve(result.value) : cast(result.value).then(onfulfill, onreject);\n        }\n        step(\"next\", void 0);\n    });\n};\nimport 'source-map-support/register';\nfunction sleep(milliseconds) {\n    return new Promise((resolve) => setTimeout(resolve, milliseconds));\n}\nfunction puts(...optionalParams) {\n    console.log.apply(this, arguments);\n}\nfunction sleepOneSecond() {\n    return __awaiter(this, void 0, Promise, function* () {\n        yield sleep(1000);\n    });\n}\nfunction printSleepAndError() {\n    return __awaiter(this, void 0, Promise, function* () {\n        puts('1');\n        yield sleepOneSecond();\n        puts('2');\n        yield sleepOneSecond();\n        puts('3');\n        throw new Error('throw error to showcase source map support.');\n    });\n}\nprintSleepAndError().catch(err => console.log(err.stack || err));\n"],"sourceRoot":"../ts"}